ixTrain <- indx < 314
new_auto_df <- auto[,c('horsepower', 'weight', 'displacement', 'mpg01')]
test_auto <- new_auto_df[!ixTrain,]
test_mpg01 <- new_auto_df$mpg01[!ixTrain]
glm_fits <- glm(mpg01 ~ ., data = new_auto_df, family = 'binomial', subset = ixTrain)
summary(glm_fits)
glm_probs <- predict(glm_fits, test_auto, type = 'response')
glm_pred <- rep(0, 79)
glm_pred[glm_probs > 0.5] <- 1
table(glm_pred, test_mpg01)
mean(glm_pred == test_mpg01)
#knitr::knit_hooks$set(document = function(x) {sub('\\usepackage[]{color}', '\\usepackage[table,dvipsnames]{xcolor}', x, fixed = TRUE)})
glm_fits <- glm(mpg01 ~ ., data = new_auto_df, family = 'binomial', subset = ixTrain)
summary(glm_fits)
#knitr::knit_hooks$set(document = function(x) {sub('\\usepackage[]{color}', '\\usepackage[table,dvipsnames]{xcolor}', x, fixed = TRUE)})
rm( list = ls() )
library(latex2exp)
library(boot)
library(ISLR)
library(MASS)
names(Smarket)
dim(Smarket)
summary(Smarket)
pairs(Smarket)
cor(Smarket[,-9])
glm_fits <- glm (Direction ~ . - Today - Year, data = Smarket, family = binomial)
summary(glm_fits)
coef(glm_fits)
summary(glm_fits)$coef
summary(glm_fits)$coef[,4]
glm_probs <- predict(glm_fits, type = 'response')
glm_probs[1:10]
contrasts(Smarket$Direction)
glm_pred <- rep('Down', 1250)
glm_pred[glm_probs > 0.5] <- 'Up'
(conf_mat <- table(glm_pred, Smarket$Direction))
(conf_mat[1,1]+conf_mat[2,2])/sum(conf_mat)
mean(glm_pred == Smarket$Direction)
ixTrain <- Smarket$Year < 2005
Smarket_2005 <- Smarket[!ixTrain,]
dim(Smarket_2005)
Direction_2005 <- Smarket$Direction[!ixTrain]
glm_fits <- glm(Direction ~ . - Today - Year, data = Smarket, family = binomial, subset = ixTrain)
glm_probs <- predict(glm_fits, Smarket_2005, type = 'response')
glm_pred <- rep('Down', 252)
glm_pred[glm_probs > 0.5] <- 'Up'
table(glm_pred, Direction_2005)
mean(glm_pred == Direction_2005)
mean(glm_pred != Direction_2005)
glm_fits <- glm(Direction ~ Lag1 + Lag2, data = Smarket, family = binomial, subset = ixTrain)
glm_probs <- predict(glm_fits, Smarket_2005, type = 'response')
glm_pred <- rep('Down', 252)
glm_pred[glm_probs > 0.5] <- 'Up'
table(glm_pred, Direction_2005)
mean(glm_pred == Direction_2005)
106/(106 + 76)
predict(glm_fits, newdata = data.frame(Lag1 = c(1.2, 1.5),
Lag2 = c(1.1, -0.8)), type = 'response')
pairs(Weekly)
cor(Weekly[,-9])
glm_fits <- glm(Direction ~ . - Today - Year, data = Weekly, family = binomial)
summary(glm_fits)
glm_probs <- predict(glm_fits, type = 'response')
glm_pred <- rep('Down', 1089)
glm_pred[glm_probs > 0.5] <- 'Up'
table(glm_pred, Weekly$Direction)
mean(glm_pred == Weekly$Direction)
ixTrain <- Weekly$Year < 2009
Weekly_test <- Weekly[!ixTrain,]
Direction_test <- Weekly$Direction[!ixTrain]
glm_fit <- glm(Direction ~ Lag2, data = Weekly, family = binomial, subset = ixTrain)
glm_probs <- predict(glm_fit, Weekly_test, type = 'response')
glm_pred <- rep('Down', 104)
glm_pred[glm_probs > 0.5] <- 'Up'
table(glm_pred, Direction_test)
mean(glm_pred == Direction_test)
mpg_median <- median(Auto$mpg)
mpg01 <- rep(0, 392)
mpg01[Auto$mpg > mpg_median] <- 1
auto <- cbind(Auto, mpg01 = as.factor(mpg01))
library(tidyverse)
library(reshape2)
new_auto <- auto[,-c(1,2,8,9)]
cor(new_auto[,-6])
pairs(new_auto)
auto_melt <- melt(new_auto, id.var = "mpg01")
auto_melt %>% ggplot(aes(x = mpg01, y = value)) + geom_boxplot(aes(fill = mpg01)) +
facet_wrap( ~ variable, scales = 'free')
set.seed(1)
indx <- sample(1:392)
ixTrain <- indx < 314
new_auto_df <- auto[,c('horsepower', 'weight', 'displacement', 'mpg01')]
test_auto <- new_auto_df[!ixTrain,]
test_mpg01 <- new_auto_df$mpg01[!ixTrain]
glm_fits <- glm(mpg01 ~ ., data = new_auto_df, family = 'binomial', subset = ixTrain)
summary(glm_fits)
glm_probs <- predict(glm_fits, test_auto, type = 'response')
glm_pred <- rep(0, 79)
glm_pred[glm_probs > 0.5] <- 1
table(glm_pred, test_mpg01)
mean(glm_pred == test_mpg01)
glm_probs <- predict(glm_fits, test_auto, type = 'response')
glm_pred <- rep(0, 79)
glm_pred[glm_probs > 0.5] <- 1
table(glm_pred, test_mpg01)
(test_error_rate <- mean(glm_pred != test_mpg01))
400/18
1/((1-2/9)^3)
((1-2/9)^3)
.47/.5
2.185/(sqrt(39.19*34.01))
2000*0.23
data <-Smarket
#knitr::knit_hooks$set(document = function(x) {sub('\\usepackage[]{color}', '\\usepackage[table,dvipsnames]{xcolor}', x, fixed = TRUE)})
library(latex2exp)
library(latex2exp)
library(boot)
library(ISLR)
library(MASS)
library(class)
data <- Smarket
View(data)
sd(Smarket[,1])
var(Smarket[,1])
mean(Smarket[,1])
mean(Smarket[,2])
var(Smarket[,2])
first <- function(x1){}
first <- function(x1){1+3*x1}
first(1)
first(-1)
first <- function(x1){-0.5*x1+1}
first(-2)
first <- function(x1,x2){1+3*x1-x2}
first(1,2)
first(-1,2)
first <- function(x1,x2){-2+x1+2*x2}
first(1,2)
first(-1,2)
first <- function(x1,x2){(1+x1)^2+(2-x2)^2}
first(2,2)
first(0,1)
first
first(-1,2)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- as.factor('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- as.factor(c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue'))
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- as.factor(c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue'))
plot(x1, x2, col = y)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- as.factor(c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue'))
plot(x1, x2, col = 3-y)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- as.factor(c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue'))
plot(x1, x2, col = y)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- ('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
plot(x1, x2, col = y)
?abline
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
plot(x1, x2, col = y, pch=20)
abline(-0.5, 1)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
plot(x1, x2, col = y, pch=20, ylim(-1, 4.5))
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
plot(x1, x2, col=y, pch=20, ylim=(-1, 4.5))
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
plot(x1, x2, col=y, pch=20, ylim=c(-1, 4.5))
abline(-0.5, 1)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
plot(x1, x2, col=y, pch=20, xlim=c(0, 4.5), ylim=c(-1, 4.5))
abline(-0.5, 1)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
#support_ix <- c()
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
rm(list = ls())
library(latex2exp)
set.seed(3)
x <- matrix(rnorm(20*2), ncol=2)
y <-c(rep(-1,10), rep(1,10))
x[y==1,] <- x[y==1,] + 1
plot(x, col=(3-y), pch=20,
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
library(e1071)
dat <- data.frame(x=x, y=as.factor(y))
svm_fit <- svm(y ~ ., data=dat, kernel='linear', cost=10, scale=FALSE)
plot(svm_fit, dat)
svm_fit$index
summary(svm_fit)
svm_fit <- svm(y ~ ., data=dat, kernel='linear', cost=0.1, scale=FALSE)
plot(svm_fit, dat)
svm_fit$index
set.seed(3)
tune_out <- tune(svm, y ~ ., data=dat, kernel='linear',
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune_out)
best_model <- tune_out$best.model
summary(best_model)
x_test <- matrix(rnorm(20*2), ncol=2)
y_test <- sample(c(-1,1), 20, rep=TRUE)
x_test[y_test==1,] <- x_test[y_test==1,] + 1
test_dat <- data.frame(x=x_test, y=as.factor(y_test))
y_pred <- predict(best_model, test_dat)
table(predicted=y_pred, true_values=test_dat$y)
svm_fit <- svm(y ~ ., data=dat, kernel='linear', cost=0.01, scale=FALSE)
y_pred <- predict(svm_fit, test_dat)
table(predicted=y_pred, true_values=test_dat$y)
x[y==1,] <- x[y==1,] + 1
plot(x, col=(y+5)/2, pch=20,
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
dat <- data.frame(x=x, y=as.factor(y))
svm_fit <- svm(y ~ ., data=dat, kernel='linear', cost=1e5)
summary(svm_fit)
plot(svm_fit, dat)
svm_fit <- svm(y ~ ., data=dat, kernel='linear', cost=1)
summary(svm_fit)
plot(svm_fit, dat)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
#support_ix <- c()
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
#points(x1[c()])
title(TeX('$0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=2)
library(ISLR)
set.seed(3)
n <- nrow(OJ)
ixTrain <- sample(1:n, 800)
oj_train <- OJ[ixTrain,]
oj_test <- OJ[-ixTrain,]
svm_fit <- svm(Purchase ~ ., data=oj_train, kernel='linear', cost=0.01)
summary(svm_fit)
purchase_train_pred <- predict(svm_fit)
table(predicted_train=purchase_train_pred, true_values=oj_train$Purchase)
(oj_train_error <- mean(purchase_train_pred != oj_train$Purchase))
purchase_test_pred <- predict(svm_fit, oj_test)
table(predicted_train=purchase_test_pred, true_values=oj_test$Purchase)
(oj_test_error <- mean(purchase_test_pred != oj_test$Purchase))
set.seed(3)
cost_values <- list(cost=seq(0.01, 10, length.out = 50))
tune_oj <- tune(svm, Purchase ~ ., data=oj_train, kernel='linear',
ranges=cost_values)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
#support_ix <- c()
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
#points(x1[c()])
title(TeX('$0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
support_ix <- c(2, 3, 5, 7)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x[support_ix], col=y[support_ix])
title(TeX('$0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
support_ix <- c(2, 3, 5, 7)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix])
title(TeX('$0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
support_ix <- c(2, 3, 5, 7)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix], pch=5)
title(TeX('$0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
support_ix <- c(2, 3, 5, 6)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix], pch=5)
title(TeX('$0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
support_ix <- c(2, 3, 5, 6)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix], pch=5)
title(TeX('$0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
support_ix <- c(2, 3, 5, 6)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix], pch=5, cex=1.25)
title(TeX('$0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
support_ix <- c(2, 3, 5, 6)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix], pch=5)
title(TeX('$0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
support_ix <- c(2, 3, 5, 6)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix], pch=5)
title(TeX('Separating Hyperplane of $0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
x1 <- c(3,2,4,1,2,4,4)
x2 <- c(4,2,4,4,1,3,1)
y <- c('Red','Red','Red','Red', 'Blue', 'Blue', 'Blue')
support_ix <- c(2, 3, 5, 6)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix], pch=5)
title(TeX('Separating Hyperplane of: $0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
support_ix <- c(2, 3, 5, 6)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix], pch=5)
title(TeX('Separating Hyperplane of: $0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
abline(0, 1, lty=2)
support_ix <- c(2, 3, 5, 6)
plot(x1, x2, col=y, pch=16, xlim=c(0, 4.5), ylim=c(-1, 4.5),
main = "", xlab = TeX("$x_1$"), ylab = TeX("$x_2$"),
cex = 0.75, cex.axis = 0.6)
points(x1[support_ix], x2[support_ix], col=y[support_ix], pch=5)
title(TeX('Separating Hyperplane of: $0.5 - X_1 + X_2 = 0$'), line = 0.75, cex.main = 0.75)
abline(-0.5, 1, lwd=1.5)
abline(0, 1, lty=2)
abline(-1, 1, lty=2)
#----nice fresh start----#
rm( list = ls() )
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Colorado School of Mines/Fall_2020/CSCI_403/project9/src")
rm ( list = ls() )
library(tidyverse)
library(reshape2)
load('../data/project9.rda')
load('../data/fires_clean.rda')
fires_with_regions <- readRDS('../data/fires_clean.rds')
my_data <- my_data %>%
filter(STATE != 'IN')
my_fires <- my_data %>%
select(-c('FIRE_CODE', 'OWNER_CODE', 'OWNER_DESCR'))
my_fires$date <- as.Date(my_fires$date)
my_fires$cont_date <- as.Date(my_fires$cont_date)
# work around to replace blank cells with common NA
ix <- which(my_fires$CONT_TIME=='')
my_fires$CONT_TIME[ix] <-1
my_fires$CONT_TIME[ix] <- NA
regions <- fires_with_regions %>%
filter(STATE %in% c('FL', 'CO', 'WY', 'AL', 'DE', 'CT')) %>%
select(c('FPA_ID', 'eco1', 'STATE')) %>%
mutate(colsplit(eco1, ' ', c('eco_id', 'eco_region'))) %>%
select(-eco1)
table(regions$eco_id)
test <- filter(regions, STATE %in% c('FL', 'CO'))
table(test$eco_id)
fl <- filter(regions, STATE %in% c('FL'))
co <- filter(regions, STATE %in% c('CO'))
table(fl$eco_id)
table(co$eco_id)
rm ( list = ls() )
library(tidyverse)
library(reshape2)
load('../data/project9.rda')
load('../data/fires_clean.rda')
fires_with_regions <- readRDS('../data/fires_clean.rds')
my_data <- my_data %>%
filter(STATE != 'IN')
my_fires <- my_data %>%
select(-c('FIRE_CODE', 'OWNER_CODE', 'OWNER_DESCR'))
my_fires$date <- as.Date(my_fires$date)
my_fires$cont_date <- as.Date(my_fires$cont_date)
# work around to replace blank cells with common NA
ix <- which(my_fires$CONT_TIME=='')
my_fires$CONT_TIME[ix] <-1
my_fires$CONT_TIME[ix] <- NA
regions <- fires_with_regions %>%
filter(STATE %in% c('FL', 'CO', 'WY', 'AL', 'DE', 'CT')) %>%
select(c('FPA_ID', 'eco1', 'STATE')) %>%
mutate(colsplit(eco1, ' ', c('eco_id', 'eco_region'))) %>%
select(-eco1)
regions_glimpse <- regions %>%
group_by(STATE) %>%
slice(1:2)
fires_glimpse <- my_fires %>%
group_by(STATE) %>%
slice(1:6)
View(regions_glimpse)
View(fires_glimpse)
write_csv(fires_glimpse, file='../data/fires_glimpse.csv')
write_csv(fires_glimpse, file='../data/fires_glimpse.csv')
rm ( list = ls() )
library(tidyverse)
library(reshape2)
load('../data/project9.rda')
load('../data/fires_clean.rda')
rm ( list = ls() )
load('../data/project9.rda')
fires_with_regions <- readRDS('../data/fires_clean.rds')
my_data <- my_data %>%
filter(STATE != 'IN')
my_fires <- my_data %>%
select(-c('FIRE_CODE', 'OWNER_CODE', 'OWNER_DESCR'))
my_fires$date <- as.Date(my_fires$date)
my_fires$cont_date <- as.Date(my_fires$cont_date)
# work around to replace blank cells with common NA
ix <- which(my_fires$CONT_TIME=='')
my_fires$CONT_TIME[ix] <-1
my_fires$CONT_TIME[ix] <- NA
regions <- fires_with_regions %>%
filter(STATE %in% c('FL', 'CO', 'WY', 'AL', 'DE', 'CT')) %>%
select(c('FPA_ID', 'eco1', 'STATE')) %>%
mutate(colsplit(eco1, ' ', c('eco_id', 'eco_region'))) %>%
select(-eco1)
regions_glimpse <- regions %>%
group_by(STATE) %>%
slice(1:2)
fires_glimpse <- my_fires %>%
group_by(STATE) %>%
slice(1:6)
rm ( list = ls() )
library(tidyverse)
library(reshape2)
load('../data/my_fires.rda')
fires_with_regions <- readRDS('../data/fires_clean.rds')
my_data <- my_data %>%
filter(STATE != 'IN')
my_fires <- my_data %>%
select(-c('FIRE_CODE', 'OWNER_CODE', 'OWNER_DESCR'))
my_fires$date <- as.Date(my_fires$date)
my_fires$cont_date <- as.Date(my_fires$cont_date)
# work around to replace blank cells with common NA
ix <- which(my_fires$CONT_TIME=='')
my_fires$CONT_TIME[ix] <-1
my_fires$CONT_TIME[ix] <- NA
regions <- fires_with_regions %>%
filter(STATE %in% c('FL', 'CO', 'WY', 'AL', 'DE', 'CT')) %>%
select(c('FPA_ID', 'eco1', 'STATE')) %>%
mutate(colsplit(eco1, ' ', c('eco_id', 'eco_region'))) %>%
select(-eco1)
regions_glimpse <- regions %>%
group_by(STATE) %>%
slice(1:2)
fires_glimpse <- my_fires %>%
group_by(STATE) %>%
slice(1:6)
